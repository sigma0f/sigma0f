# Copyright 2007-2008 Bryan Ã˜stergaard <kloeri@exherbo.org>
# Copyright 2008-2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2010, 2012 Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

require flag-o-matic toolchain-funcs

export_exlib_phases pkg_pretend pkg_setup src_prepare src_unpack src_configure src_compile src_install

SUMMARY="GNU C library"
HOMEPAGE="https://www.gnu.org/software/libc"

myexparam minimum_kernel_version="4.14"
exparam -v MINIMUM_KERNEL_VERSION minimum_kernel_version

local base_url="https://repo.or.cz/glibc.git/snapshot/refs/headers/google/grte"
DOWNLOADS="${base_url}/v6-${PV}/master.tar.gz -> glibc-${PV}.tar.gz"

LICENCES="|| ( GPL-3 GPL-2 ) || ( LGPL-3 LGPL-2.1 )"
SLOT="0"
MYOPTIONS=""

# tests are expensive
RESTRICT=test

DEPENDENCIES="
    build:
	dev-lang/perl:*
	dev-lang/python:*[>=3]
	sys-apps/gawk
	sys-apps/texinfo[>=4.7]
	sys-devel/bison[>=2.7]
	sys-kernel/linux-headers[>=${MINIMUM_KERNEL_VERSION}]
	virtual/sed
    build+run:
	net-dns/libidn2:=[>=2.0.5]
    run:
	sys-libs/timezone-data[>=2015f-r1] [[ note = [ files used to collide, rebuild to change mtime ] ]]
"

ECONF_SOURCE="${WORK}"
WORK="${WORKBASE}/build"

DEFAULT_SRC_INSTALL_PARAMS=(
    install_root="${IMAGE}"
    sbindir=/usr/$(exhost --target)/bin
    rootsbindir=/usr/$(exhost --target)/bin
)

glibc_pkg_pretend() {
    if [[ $(exhost --target) != *-gnu* ]];then
	die "Installing glibc on a non *-gnu* CHOST is a really, really bad idea and will definitely break your system."
    fi

    if [[ -f "${ROOT}etc/tmpfiles.d/nscd.conf" ]] ; then
	ewarn "The configuration file /etc/tmpfiles.d/nscd.conf has been moved to"
	ewarn "/usr/$(exhost --target)/lib/tmpfiles.d/nscd.conf and can be safely removed after"
	ewarn "upgrade if you did not make any changes to it."
    fi

    # TODO(compnerd) consider using filter-flags rather than dying here
    if [[ $(get-flag -ggdb3) == '-ggdb3' ]]; then
	die "Building glibc with CFLAGS=-ggdb3 is broken. Aborting."
    fi
}

glibc_pkg_setup() {
    # NOTE(compnerd) glibc doesn't compile with -Os. See bug:
    # http://sourceware.org/bugzilla/show_bug.cgi?id=5203 for details
    filter-flags -O*
    append-flags -O2

    # NOTE(compnerd) glibc doesnt build with LTO (bug 52489/51255)
    # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51255
    # reproducible with BFD ld and gold (.init_array/.fini_array is discarded by linker)
    filter-flags -flto

    # NOTE(moben) parts of glibc can't be built with -fstack-protector.
    # configure's --enable-stack-protector=strong handles the parts that can be
    filter-flags -fstack-protector -fstack-protector-all -fstack-protector-strong

    # NOTE(olesalscheider) retpoline flag collides with stack-protector.
    filter-flags -mindirect-branch=thunk

    # NOTE(moben) glibc can't be built with -D_FORTIFY_SOURCE and configure appends -U_FORTIFY_SOURCE
    # for that reason. But we set CPPFLAGS=${CFLAGS} which causes _FORTIFY_SOURCE to be defined again.
    # NOTE(moben) -Ufoo does not cancel out -Wp,-Dfoo
    append-cppflags -U_FORTIFY_SOURCE -Wp,-U_FORTIFY_SOURCE
}

glibc_src_unpack() {
    default
    edo mv glibc-google.* ${PNV}
    edo mkdir "${WORK}"
}

glibc_src_prepare() {
    edo cd "${ECONF_SOURCE}"

    if [[ -d ${FILES}/patches-${PV} ]]; then
	expatch -p1 "${FILES}"/patches-${PV}
    fi
}

glibc_src_configure() {
    local target=$(exhost --target) build=$(exhost --build)

    local myconf=()

    myconf+=(
	--build=${build}
	--cache-file=config.cache
	--datarootdir=/usr/share
	--host=${target}
	--libdir=/usr/${target}/lib
	--localedir=/usr/share/locale
	--localstatedir=/var/$(exhost --target)
	--prefix=/usr/${target}
	--sysconfdir=/etc
	--enable-sanity-checks
	--enable-shared
	--disable-profile
	--disable-static-pie
	--disable-timezone-tools
	--enable-stackguard-randomization
	--enable-hidden-plt
	--disable-bind-now
	--enable-stack-protector=no
	--enable-static-nss
	--enable-kernel=${MINIMUM_KERNEL_VERSION}
	--disable-werror
	--disable-multi-arch
	--enable-experimental-malloc
	--disable-nss-crypt
	--disable-obsolete-rpc
	--disable-obsolete-nsl
	--disable-systemtap
	--disable-build-nscd
	--disable-nscd
	--disable-pt_chown
	--disable-tunables
	--disable-float128
	--enable-mathvec
	--enable-cet
	--without-gd
	--without-selinux
	--with-clang
	--with-lld
	--with-headers=/usr/${target}/include
	--with-default-link
	--with-nonshared-cflags="-fPIC -fPIE"
	libc_cv_pie_default=yes
	libc_cv_cc_pie_default=yes
	libc_cv_pic_default=yes
	libc_cv_mtls_dialect_gnu2=yes
	libc_cv_cxx_thread_local=yes
	libc_cv_output_format=elf64-x86-64
	CC=${CC}
	CXX=${CXX}
	CFLAGS="${CFLAGS}"
	CPPFLAGS="-DLD_SO_CONF='\"/etc/ld-$(exhost --target).path\"' -DLD_SO_CACHE='\"/etc/ld-$(exhost --target).cache\"'"
    )

    edo	"${WORKBASE}/${PNV}/configure" \
	"${myconf[@]}"
}

glibc_src_compile() {
    emake DESTDIR="${IMAGE}"
}

glibc_src_install() {
    local noins_files=(
	"${IMAGE}/etc/ld.so.cache"
	"${IMAGE}/etc/localtime"
    )

    export LANGUAGE=C

    emake -j1 "${DEFAULT_SRC_INSTALL_PARAMS[@]}" DESTDIR="${IMAGE}" install

    # don't install /etc/{ld.so.cache,localtime}
    edo rm -f "${noins_files[@]}"

    # remove empty locale dirs
    edo find "${IMAGE}"/usr/share/locale/ -type d -empty -delete

    # create a target file so eclectic knows to generate a ld config file for this target
    edo mkdir -p "${IMAGE}"/etc/env.d/targets
    edo touch "${IMAGE}"/etc/env.d/targets/$(exhost --target)
}
