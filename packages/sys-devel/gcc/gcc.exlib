# Copyright 2012 Â© Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

require gcc.gnu.org
require alternatives flag-o-matic
require toolchain-runtime-libraries

export_exlib_phases pkg_setup src_prepare src_configure src_compile src_install pkg_postinst

SUMMARY="The GNU Compiler Collection - free and open compilers for C, C++, Obj-C, and more."

LICENCES="GPL-2"

# See https://gcc.gnu.org/develop.html#num_scheme for the logic about versioning
# in short: x.x.0 is experimental, x.x.1 is pre-release, x.1.0 is release
# because this needed to be complicated further..
# From now on, just use the major version as the slot. This matches with how upstream does maintainence releases.

SLOT="$(ever major)"

# Update the multiarch patch when adding a target
CROSS_COMPILE_TARGETS="
    aarch64-unknown-linux-gnueabi
    aarch64-unknown-linux-musleabi
    armv4-unknown-linux-gnueabi
    armv4-unknown-linux-gnueabihf
    armv4-unknown-linux-musleabi
    armv4-unknown-linux-musleabihf
    armv5-unknown-linux-gnueabi
    armv5-unknown-linux-gnueabihf
    armv5-unknown-linux-musleabi
    armv5-unknown-linux-musleabihf
    armv6-unknown-linux-gnueabi
    armv6-unknown-linux-gnueabihf
    armv6-unknown-linux-musleabi
    armv6-unknown-linux-musleabihf
    armv7-unknown-linux-gnueabi
    armv7-unknown-linux-gnueabihf
    armv7-unknown-linux-musleabi
    armv7-unknown-linux-musleabihf
    i686-pc-linux-gnu
    i686-pc-linux-musl
    ia64-unknown-linux-gnu
    powerpc64-unknown-linux-gnu
    x86_64-pc-linux-gnu
    x86_64-pc-linux-musl
"

MYOPTIONS="
    ( targets: ${CROSS_COMPILE_TARGETS} ) [[ number-selected = at-least-one ]]
    graphite [[ description = [ enable support for Graphite based loop optimizations ] ]]
    threads  [[ description = [ build with threading support; requires target libc ] ]]
    fortran
    objc
    obj-c++
"

if ever at_least 10.0.1_pre20200322 ; then
    MYOPTIONS+="
        zstd [[ description = [ Enables support for LTO bytecode compression with zstd ] ]]
    "
fi

DEPENDENCIES="
    build+run:
        graphite? ( dev-libs/isl:=[>=0.15] )
        threads? (
            dev-libs/gmp:=[>=4.2]
            dev-libs/mpc:=[>=0.8.1]
            sys-libs/zlib
        )
        !sys-devel/static-gcc [[
            description = [ static-gcc was moved back to gcc. ]
            resolution = uninstall-blocked-after
        ]]
    run:
        sys-devel/binutils[targets:*(-)?]
        !dev-lang/clang[<3.6.1-r5] [[
            description = [ Alternatives conflict ]
            resolution = uninstall-blocked-after
        ]]
    post:
        sys-libs/libstdc++:${SLOT}[~${PV}]
        app-admin/eclectic-gcc[targets:*(-)?]
"
#   build:
#       $(for host in ${CROSS_COMPILE_TARGETS} ; do
#           echo hosts:${host}? ( sys-devel/binutils[targets:${host}] )
#         done)
#   buil+run:
#       sys-libs/glibc[hosts:*(-)?]

if ever at_least 11.0.1_pre20210228 ; then
    DEPENDENCIES+="
        build+run:
            zstd? ( app-arch/zstd[>=1.3.0] )
    "
elif ever at_least 10.0.1_pre20200322 ; then
    DEPENDENCIES+="
        build+run:
            zstd? ( app-arch/zstd )
    "
fi

if ever at_least 7.0 ; then
    DEPENDENCIES+="
        build+run:
            dev-libs/mpfr:=[>=3.1.0]
    "
else
    DEPENDENCIES+="
        build+run:
            dev-libs/mpfr:=[>=2.4.0]
    "
fi

if [[ ${PV} == *_pre* ]] ; then
    ECONF_SOURCE="${WORKBASE}/gcc-$(ever major)-${PV##*_pre}"
elif [[ ${PV} == *-rc* ]] ; then
    ECONF_SOURCE="${WORKBASE}/gcc-${PV/rc/RC-}"
else
    ECONF_SOURCE="${WORKBASE}/gcc-${PV/_p?(re)/-}"
fi
WORK=${ECONF_SOURCE}

gcc_pkg_setup() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        # NOTE(compnerd) ensure that CFLAGS_FOR_TARGET are specified by the user as otherwise the
        # generated target components will be invalid as they will be compiled with CFLAGS for the
        # host.
        if option targets:${target} ; then
            [[ -n "$(print-flags ${target} CFLAGS)" ]]  || die "CFLAGS for ${target} are not set"
        fi
    done
}

gcc_src_prepare() {
    edo sed -i -e '/AR = ar/cAR := \$(AR)' libcpp/Makefile.in
    edo sed -i -e 's@\./fixinc\.sh@-c true@' gcc/Makefile.in
    default
}

gcc_src_configure() {
    local build=$(exhost --build) host=$(exhost --target) target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        local gxx_incdir=/usr/${target}/include/c++/${PV%%@(_p*|-rc*)}
        local args=()

        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo mkdir -p "${WORKBASE}/build/${target}"
        edo cd "${WORKBASE}/build/${target}"

	local languages="c,c++"
	if option fortran ; then
	   languages+=",fortran"
	fi
	
	if option objc ; then
	   languages+=",objc"
	fi

	if option obj-c++ ; then
	   languages+=",obj-c++"
	fi

        args+=(
            --build=${build}
            --host=${host}
            --target=${target}
            --prefix=/usr/${host}
            --datarootdir=/usr/share
            --localstatedir=/var
            --sysconfdir=/etc
            --disable-dependency-tracking
            --enable-fast-install
            --enable-serial-configure
            --disable-bootstrap
            --disable-decimal-float
            --disable-install-libiberty
            --disable-libada
            --disable-libatomic
            --disable-libcilkrts
            --disable-libffi
            --disable-libgfortran
            --disable-libgo
            --disable-libgomp
            --disable-libitm
            --disable-libobjc
            --disable-liboffloadmic
            --disable-libquadmath
            --disable-libsanitizer
            --disable-libssp
            --disable-libstdcxx
            --disable-libstdc++-v3
            --disable-libvtv
            --disable-vtable-verify
            --disable-multilib
            --disable-nls
            --disable-shared
            --enable-lto
            --enable-plugin
            --enable-plugins
            $(option_enable threads)
            --enable-languages=${languages}
            --with-sysroot='""'
            --with-gxx-include-dir="${gxx_incdir}"
            $(option_with graphite isl)
            $(optionq threads || echo --with-newlib)
            $(optionq threads || echo --without-headers)
            --with-lib-path=/usr/${target}/lib
            # gcc doesn't like as from llvm
            --with-as=/usr/${CHOST}/${target}/bin/as.binutils
            --with-ld=/usr/${CHOST}/bin/${target}-ld
            --with-system-zlib
            --with-glibc-version=2.11
            --enable-linker-build-id
            --with-multilib-list=
        )

        if ever at_least 7.3; then
            args+=(
                --disable-libhsail-rt
                --enable-default-pie
            )
        else
            args+=( --disable-libjava )
        fi

        if ever at_least 9.0; then
            args+=( --disable-libphobos )
        else
            args+=( --disable-libmpx )
        fi

        if ever at_least 10.0.1_pre20200322 ; then
            args+=(
                --enable-analyzer
                $(option_with zstd)
            )
        fi

        if [[ ${target} == ${host} ]]; then
            args+=( --program-transform="s,$,-${SLOT}," )
        else
            args+=( --program-transform="s,^,${target}-,;s,$,-${SLOT}," )
        fi

        if ever at_least 10.0.1_pre20200426 ; then
            if [[ ${host} == i686-*-linux-* ]] || [[ ${host} == x86_64-*-linux-* ]] || \
                [[ ${target} == i686-*-linux-* ]] || [[ ${target} == x86_64-*-linux-* ]] ; then
                args+=( --enable-cet )
            else
                args+=( --disable-cet )
            fi
        else
            if [[ ${target} == i686-*-linux-* ]] || [[ ${target} == x86_64-*-linux-* ]] ; then
                args+=( --enable-cet )
            else
                args+=( --disable-cet )
            fi
        fi

        if [[ ${target} == armv7* ]]; then
            # TODO(compnerd) use the variant agnostic architecture by default
            if ever at_least 8.1 && [[ ${target} == *hf ]] ; then
                args+=( --with-arch=armv7-a+fp )
            else
                args+=( --with-arch=armv7-a )
            fi
        fi

        if [[ ${target} == arm*-*-*-*hf ]]; then
            args+=( --with-float=hard )
        fi

        edo env                                                     \
            AR=${build}-ar                                          \
            RANLIB=${build}-ranlib                                  \
            AR_FOR_TARGET=${target}-ar                              \
            AS_FOR_TARGET=${target}-as                              \
            CPP_FOR_TARGET=${target}-cpp                            \
            READELF_FOR_TARGET=${target}-readelf                    \
            NM_FOR_TARGET=${target}-nm                              \
            OBJDUMP_FOR_TARGET=${target}-objdump                    \
            CFLAGS_FOR_TARGET="$(print-flags ${target} CFLAGS)"     \
            CPPFLAGS_FOR_TARGET="$(print-flags ${target} CPPFLAGS)" \
            CXXFLAGS_FOR_TARGET="$(print-flags ${target} CXXFLAGS)" \
            LDFLAGS_FOR_TARGET="$(print-flags ${target} LDFLAGS)"   \
            CC_FOR_BUILD=${build}-cc                                \
            CXX_FOR_BUILD=${build}-c++                              \
            AR_FOR_BUILD=${build}-ar                                \
            RANLIB_FOR_BUILD=${build}-ranlib                        \
            CFLAGS_FOR_BUILD="$(print-build-flags CFLAGS)"          \
            CPPFLAGS_FOR_BUILD="$(print-build-flags CPPFLAGS)"      \
            CXXFLAGS_FOR_BUILD="$(print-build-flags CXXFLAGS)"      \
            LDFLAGS_FOR_BUILD="$(print-build-flags LDFLAGS)"        \
        "${ECONF_SOURCE}/configure" "${args[@]}"
    done
}

gcc_src_compile() {
    local target=

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"

        # NOTE(compnerd) unset CPP which is set by default by ebuild.bash.  We want to auto-detect
        # the C preprocessor so that the cross-compiled configuration is properly detected and can
        # honour the target specific flags.
        unset CPP

        # libcc1's configure uses this when cross-compiling, but it's
        # only set in gcc/configure
        export gcc_cv_objdump=${target}-objdump

        local gcc_targets=
        if ! option threads; then
            gcc_targets="all-gcc all-target-libgcc"
        fi

        AR_FOR_TARGET=${target}-ar                              \
        READELF_FOR_TARGET=${target}-readelf                    \
        CFLAGS_FOR_TARGET="$(print-flags ${target} CFLAGS)"     \
        CPPFLAGS_FOR_TARGET="$(print-flags ${target} CPPFLAGS)" \
        CXXFLAGS_FOR_TARGET="$(print-flags ${target} CXXFLAGS)" \
        LDFLAGS_FOR_TARGET="$(print-flags ${target} LDFLAGS)"   \
        CFLAGS_FOR_BUILD="$(print-build-flags CFLAGS)"          \
        CPPFLAGS_FOR_BUILD="$(print-build-flags CPPFLAGS)"      \
        CXXFLAGS_FOR_BUILD="$(print-build-flags CXXFLAGS)"      \
        LDFLAGS_FOR_BUILD="$(print-build-flags LDFLAGS)"        \
            emake ${gcc_targets}
    done
}

gcc_src_install() {
    local host=$(exhost --target) target=
    local alternatives=()

    for target in ${CROSS_COMPILE_TARGETS} ; do
        if option !targets:${target} ; then
            echo "    Cross-Compile Target: ${target} (disabled)"
            continue
        fi

        local gcc_targets="install"
        if ! option threads; then
            gcc_targets="install-gcc install-target-libgcc"
        fi

        echo "    Cross-Compile Target: ${target}"

        edo cd "${WORKBASE}/build/${target}"
        emake -j1 DESTDIR="${IMAGE}" ${gcc_targets}

        edo pushd "${IMAGE}"

        # c++ is provided by eclectic-gcc
        nonfatal edo rm usr/${host}/bin/{,${target}-}c++-${SLOT}
        nonfatal edo rm usr/share/man/man1/{,${target}-}c++-${SLOT}.1

        edo rm usr/${host}/bin/${target}-gcc-$(ever range 1-3)

        if [[ ${target} == ${host} ]] ; then
            # TODO(compnerd) tweak build to automatically name these tools properly
            for tool in cpp-${SLOT} gcov-${SLOT} gcov-tool-${SLOT} ; do
                if [[ -e usr/${host}/bin/${tool} ]]; then
                   nonfatal edo mv usr/${host}/bin/{,${target}-}${tool}
                fi
                nonfatal edo mv usr/share/man/man1/{,${target}-}${tool}.1
            done
            for tool in g++-${SLOT} gcc-${SLOT} gcc-ar-${SLOT} gcc-nm-${SLOT} gcc-ranlib-${SLOT} gfortran-${SLOT} ; do
                nonfatal edo rm usr/${host}/bin/${tool}
                nonfatal edo mv usr/share/man/man1/{,${target}-}${tool}.1
            done
        fi


        local unset_nullglob=
        shopt -q nullglob || unset_nullglob=1
        shopt -s nullglob

        # allow for C pre-preprocessor alternatives to be set correctly
        edo pushd usr/${host}/bin
        edo mv ${target}-cpp-${SLOT} ${target}-gcc-cpp-${SLOT}
        nonfatal edo rm ${target}-cpp
        edo popd
        edo pushd usr/share/man/man1
        edo mv ${target}-cpp-${SLOT}.1 ${target}-gcc-cpp-${SLOT}.1
        nonfatal edo rm ${target}-cpp.1
        edo popd

        for tool in usr/${host}/bin/${target}-*-${SLOT}; do
            alternatives+=( /${tool%-${SLOT}} ${tool##*/} )
        done

        for man in usr/share/man/man*/*.*; do
            local ext=${man##*.}
            # some are already slotted due to --program-suffix, some aren't
            [[ ${man} =~ -${SLOT}.${ext}$ ]] && man=${man%-${SLOT}.${ext}}.${ext}
            local name=${man##*/}
            alternatives+=( /${man} ${name%.${ext}}-${SLOT}.${ext} )
        done
        for info in usr/share/info/*.info; do
            # some are already slotted due to --program-suffix, some aren't
            [[ ${info} =~ -${SLOT}.info$ ]] && info=${info%-${SLOT}.info}.info
            local name=${info##*/}
            alternatives+=( /${info} ${name%.info}-${SLOT}.info )
        done
        for locale in usr/share/locale/*/*/*.mo; do
            [[ -e ${locale} ]] || continue
            local name=${locale##*/}
            alternatives+=( /${locale} ${name%.mo}-${SLOT}.mo )
        done

        [[ -n ${unset_nullglob} ]] && shopt -u nullglob

        edo popd

        # allows using the non-gcc-prefixed ar, nm, ranlib on lto objects
        alternatives+=( /usr/${host}/${target}/lib/bfd-plugins/liblto_plugin.so
                        /usr/${host}/libexec/gcc/${target}/$(ever range 1-3)/liblto_plugin.so )
    done

    edo pushd "${IMAGE}"
    for tool in usr/${host}/bin/${host}-*-${SLOT}; do
        [[ ${tool} =~ ^.*/${host}-(.*)-${SLOT}$ ]] && local name=${BASH_REMATCH[1]}
        dosym ${host}-${name}-${SLOT} /usr/${host}/bin/${name}-${SLOT}
        dobanned ${name}-${SLOT}
        alternatives+=(
            "${BANNEDDIR}"/${name}       ${name}-${SLOT}
            /usr/${host}/bin/${name}     ${name}-${SLOT}
        )
        if [[ -e usr/share/man/man1/${host}-${name}-${SLOT}.1 ]]; then
            dosym ${host}-${name}-${SLOT}.1 /usr/share/man/man1/${name}-${SLOT}.1
            alternatives+=( /usr/share/man/man1/${name}.1  ${name}-${SLOT}.1 )
        fi
    done
    edo popd

    # slot libcc1 with alternatives-light. Has to be handled specifically because it's
    # in "lib" and not "lib/<target>/<gcc version>"
    symlink_dynamic_libs libcc1
    slot_dynamic_libs libcc1
    # libcc1.la is unused
    nonfatal edo rm "${IMAGE}"/usr/${host}/lib/libcc1.la

    alternatives_for gcc ${SLOT} ${SLOT} "${alternatives[@]}"

    edo find "${IMAGE}" -depth -type d -empty -delete
}

gcc_pkg_postinst() {
    # make sure libcc1.so.0.0.0 gets replaced with the alternative
    libcc1=usr/$(exhost --target)/lib/libcc1.so.0.0.0
    if [[ -f ${ROOT}${libcc1} && ! -L ${ROOT}${libcc1} ]]; then
        edo rm "${ROOT}${libcc1}"
    fi

    alternatives_pkg_postinst

    # gcc erroneously installed ${target}-c++ in [<=4.9.2-r12] [<=5.3.0-r2] and [<=6.0.0_pre20160207-r1]
    # which wil vanish when updating it. Regenerate the symlink with the alternative from eclectic-gcc
    if ! nonfatal edo eclectic alternatives update c++; then
        exlogfailure
        eerror 'failed to update c++ alternative. Run "eclectic alternatives update c++" manually'
    fi
}

