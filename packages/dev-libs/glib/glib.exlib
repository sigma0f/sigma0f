# Copyright 2008 Saleem Abdulrasool <compnerd@compnerd.org>
# Copyright 2018 sigma0f <sigma0f@pme.me>
# Distributed under the terms of the GNU General Purpose License v2

require gnome.org [ suffix=tar.xz ]

SUMMARY="General purpose utility library"
DESCRIPTION="
GLib is a general-purpose utility library, which provides many useful data
types, macros, type conversions, string utilities, file utilities, a main loop
abstraction, and so on. It works on many UNIX-like platforms, Windows, OS/2 and
BeOS. The general policy of GLib is that all functions are invisibly threadsafe
with the exception of data structure manipulation functions, where, if you have
two threads manipulating the same data structure, they must use a lock to
synchronize their operation.
"
HOMEPAGE="http://www.gtk.org"
DOWNLOADS+=" http://pkgconfig.freedesktop.org/releases/pkg-config-0.26.tar.gz"

MYOPTIONS=""

if ever at_least 2.54.0; then
    LICENCES="LGPL-2.1"
else
    LICENCES="LGPL-2"
fi

REMOTE_IDS="freecode:glib"

glib_src_test() {
    if ! exhost --is-native -q; then
        echo "cross compiled host, skipping tests"
        return 0
    fi

    unset DISPLAY
    unset DBUS_SESSION_BUS_ADDRESS
    unset DBUS_SESSION_BUS_PID

    export XDG_CONFIG_DIRS="/etc/xdg"
    export XDG_DATA_DIRS="/usr/share"
    export XDG_DATA_HOME="${TEMP}"

    # G_DBUS_COOKIE_SHA1_KEYRING_DIR requires 700 permissions and TEMP is 755
    export G_DBUS_COOKIE_SHA1_KEYRING_DIR_IGNORE_PERMISSION=1
    export G_DBUS_COOKIE_SHA1_KEYRING_DIR="${TEMP}"

    # Use the memory backend instead of dconf. The dconf-settings backend
    # causes problems in our testing environment.
    export GSETTINGS_BACKEND=memory

    # Make sure we use the built-in unix backend instead of the gvfs module which
    # causes numerous issues in our testing environment.
    export GIO_USE_VOLUME_MONITOR=unix

    export GIO_USE_FILE_MONITOR=inotify

    esandbox allow_net 'unix-abstract:/tmp/dbus-*'

    echo "Launching DBus session bus..."
    eval "$(dbus-launch --sh-syntax)"
    [[ -z ${DBUS_SESSION_BUS_PID} ]] && die "Launching DBus session bus failed"

    esandbox allow_net --connect 'unix:/tmp/gdbus,unix,test.*/bus'
    esandbox allow_net 'unix:/tmp/gdbus,unix,test.*/bus'
    esandbox allow_net --connect 'unix:/tmp/g-dbus-tests-pid-*'
    esandbox allow_net 'unix:/tmp/g-dbus-tests-pid-*'
    esandbox allow_net --connect 'unix:/tmp/gdbus-test-does-not-exist-pid'
    esandbox allow_net 'unix-abstract:/tmp/gdbus-test-/dbus-*'
    esandbox allow_net 'unix-abstract:/tmp/test-dbus-peer/dbus-*'
    esandbox allow_net --connect "inet:127.0.0.1@1024-65535"

    if ! nonfatal emake check ; then
        edo kill ${DBUS_SESSION_BUS_PID}
        die "emake check failed"
    fi

    esandbox disallow_net --connect 'unix:/tmp/gdbus,unix,test.*/bus'
    esandbox disallow_net 'unix:/tmp/gdbus,unix,test.*/bus'
    esandbox disallow_net --connect 'unix:/tmp/g-dbus-tests-pid-*'
    esandbox disallow_net 'unix:/tmp/g-dbus-tests-pid-*'
    esandbox disallow_net --connect 'unix:/tmp/gdbus-test-does-not-exist-pid'
    esandbox disallow_net 'unix-abstract:/tmp/gdbus-test-/dbus-*'
    esandbox disallow_net 'unix-abstract:/tmp/dbus-*'
    esandbox disallow_net 'unix-abstract:/tmp/test-dbus-peer/dbus-*'
    esandbox disallow_net --connect "inet:127.0.0.1@1024-65535"

    edo kill ${DBUS_SESSION_BUS_PID}
}

export_exlib_phases src_test

